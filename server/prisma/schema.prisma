generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
name   String @default("")
  id        String      @id @default(uuid())
  username  String      @unique
  email     String      @unique
  activated Boolean     @default(true)
  password  String
  role      userRole    @default(USER)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  foundItem FoundItem[]
  claim     Claim[]
  userImg   String      @default("")
  isDeleted Boolean     @default(false)
  deletedAt DateTime?
  // profile   UserProfile?
  LostItem  LostItem[]

  @@map("users")
}

model ItemCategory {
  id         String      @id @default(uuid())
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  foundItems FoundItem[]
  LostItem   LostItem[]

  @@map("itemsCategories")
}

model FoundItem {
  id            String             @id @default(uuid())
  userId        String
  img           String             @default("")
  user          User               @relation(fields: [userId], references: [id])
  categoryId    String
  category      ItemCategory? @relation(fields: [categoryId], references: [id])
  foundItemName String
  description   String
  location      String
  date          DateTime           @default(now())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  claim         Claim[]
  claimProcess  String             @default("")
  isClaimed     Boolean            @default(false)
  isDeleted     Boolean            @default(false)
  deletedAt     DateTime?

  @@map("foundItems")
}

model LostItem {
  id           String             @id @default(uuid())
  userId       String
  lostItemName String
  categoryId   String
  img          String             @default("")
  description  String
  location     String
  date         DateTime
  category     ItemCategory? @relation(fields: [categoryId], references: [id])
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  isFound      Boolean            @default(false)
  isDeleted    Boolean            @default(false)
  deletedAt    DateTime?
  user         User               @relation(fields: [userId], references: [id])

  @@map("lostItems")
}

model Claim {
  id                     String    @id @default(uuid())
  userId                 String
  foundItemId            String
  isDeleted    Boolean            @default(false)
  deletedAt    DateTime?
  status                 status    @default(PENDING)
  distinguishingFeatures String?
  lostDate               DateTime
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  user                   User      @relation(fields: [userId], references: [id])
  foundItem              FoundItem @relation(fields: [foundItemId], references: [id])

  @@map("claims")
}


enum status {
  PENDING
  APPROVED
  REJECTED
}

enum userRole {
  ADMIN
  USER
}
